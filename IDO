//SPDX-License-Identifier:GPL-3.0
pragma solidity ^0.8.15;
import "github.com/Prasoon180/superPAD_Project_5_AUG_2022/blob/main/IBEP20";

 contract IDO   {                   // This is main contract ie; IDO.sol


IBEP20  public  bep20Address;
uint public _weeksforPrivate;
uint public _weeksforPublic;         // define variable of weeks and months of individual item
uint public _monthsforReward;
uint public _monthsforReserve = 13;    // due to 1 year lockup
uint public _monthsforTeam = 13;       // due to 1 year lockup
uint public _monthsforMarket;
uint public _monthsforLiquidity;

uint public _TGEforPrivate;
uint public _TGEforPublic;
uint public _TGEforReserve;
uint public _TGEforReward;             // define variable of TGE of individual item
uint public _TGEforTeam;
uint public  _TGEforLiquidity;
uint public _TGEforMarket;
address public owner;

/*  owner of smart contract.
BEP20 address put in IDO contract in Constructor */

constructor(address _bep20Address)   {
    bep20Address = IBEP20(_bep20Address);  
    owner = msg.sender;              
    }

    modifier onlyOwner(){                       // modifier function used here
        require(msg.sender == owner ,"you can't unlock now");
        _;
    }         // modifier is used, to be only called by msg.sender of the contract  

/* when tge() will be called , then only _private(), _public(), team() etc, will be called.
* After calling tge() , we will add token to IDO contract for transfering of token

* Here TGE is initial time permanently set for individual item
 */

function tge() public onlyOwner {
    _TGEforPrivate = block.timestamp; 
    _TGEforPublic = block.timestamp;
    _TGEforReward = block.timestamp; 
    _TGEforReserve = block.timestamp + 31104000 seconds;   // 12 months = 31104000 seconds
    _TGEforTeam = block.timestamp + 31104000 seconds;       // 12 months = 31104000 seconds
    _TGEforLiquidity = block.timestamp;
    _TGEforMarket = block.timestamp;  
}

/*  function define for private
* 9 months equal weekly unlocking starting at TGE ---Token Distribution
* 1 WEEK = 604800 seconds*/ 
   
function _private(address to , uint _amount) external onlyOwner {


    if(_weeksforPrivate < 40) {                // _weeks = 40
    require(block.timestamp > _TGEforPrivate, "1 WEEK NOT OVER");
     bep20Address.transfer( to, _amount);                           
     _weeksforPrivate ++;
    _TGEforPrivate += 604800 seconds;
    
}

}

/*  function define for public
* 3 months equal weekly unlocking starting at TGE ---Token Distribution
* 1 WEEK = 604800 seconds */

function _public(address to, uint _amount) external onlyOwner {
                
      if( _weeksforPublic < 14) {                   // _weeks = 15
          require(block.timestamp > _TGEforPublic, "1 WEEK NOT OVER");
          bep20Address.transfer( to, _amount);
          _weeksforPublic ++;
          _TGEforPublic += 604800 seconds;                
      }
    
    }

/*  function define for reward
* 10% TGE then linearly over 12 Months ---Token Distribution
* 1 MONTH = 30 DAYS ;   30 DAYS = 2592000 seconds*/  

function reward(address to, uint _amount) external onlyOwner {
   
               
              
    if( _monthsforReward < 26) {                    // _weeks = 26
       require(block.timestamp >  _TGEforReward, "1 MONTH NOT OVER FOR REWARD");
          bep20Address.transfer( to, _amount);
          _monthsforReward ++;
          _TGEforReward += 2592000 seconds;    
    }
    
}

/*  function define for reserve
* 1 year lockup then linearly over 12 Months  ---Token Distribution
* 1 MONTH = 30 DAYS ;   30 DAYS = 2592000 seconds*/

function reserve(address to, uint _amount) external onlyOwner {
                       
 
    if(_monthsforReserve >= 13 && _monthsforReserve < 26) {                // _weeks 13 to 25
       require(block.timestamp > _TGEforReserve, 
       "Wait for 12 Months & after this wait for 1 Month equally");
          bep20Address.transfer( to, _amount);    
          _monthsforReserve ++;
          _TGEforReserve += 2592000 seconds;  
    }
     
      //  block.timestamp - _TGEforReward > 2592000 seconds.
}

/* function define for market
*5% TGE then linearly over 12 months ---Token Distribution
* 1 MONTH = 30 DAYS ;   30 DAYS = 2592000 seconds*/

function market(address to, uint _amount) external onlyOwner {
                
    
    if( _monthsforMarket < 26) {                               // _weeks = 26
       require(block.timestamp >_TGEforMarket, "1 MONTH NOT OVER FOR MARKET");
          bep20Address.transfer( to, _amount);
          _monthsforMarket ++;               
          _TGEforMarket += 2592000 seconds; 
    }
    
    }

      /* function define for team
      *1 year lockup then linearly over 12 months  ---Token Distribution
      * 1 MONTH = 30 DAYS ;   30 DAYS = 2592000 seconds*/
      
      function team(address to, uint _amount) external onlyOwner {

    if(_monthsforTeam >= 13 && _monthsforTeam < 26) {                         // _weeks = 13 to 25
       require(block.timestamp > _TGEforTeam, "Wait for 12 Months & after this wait for 1 Month equally");
          bep20Address.transfer( to, _amount);    
          _monthsforTeam ++;
          _TGEforTeam += 2592000 seconds;  
    }
     
       }

        /* function define for liquidity
        *20% TGE then linearly over 12 Months ---Token Distribution
        * 1 MONTH = 30 DAYS ;   30 DAYS = 2592000 seconds*/

    function liquidity(address to, uint _amount) external onlyOwner {

    if( _monthsforLiquidity < 14) {              // _months = 14
       require(block.timestamp > _TGEforLiquidity, "1 MONTH NOT OVER FOR LIQUIDITY");
          bep20Address.transfer( to, _amount);
          _monthsforLiquidity ++;
          _TGEforLiquidity += 2592000 seconds;           
    }
      
    }

}

